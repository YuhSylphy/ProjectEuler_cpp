#define BOOST_RESULT_OF_USE_DECLTYPE

#include "stdafx.h"
#include <iostream>
#include <vector>
#include <string>

#include "pe.h"

#include <boost/range/numeric.hpp>
#include <boost/range/iteration.hpp>
#include <boost/range/adaptor/filtered.hpp>
#include <boost/range/adaptor/regular_extension/filtered.hpp>
#include <boost/range/adaptor/transformed.hpp>
#include <boost/range/adaptor/regular_extension/transformed.hpp>
#include <boost/range/adaptor/taken_while.hpp>

using namespace euler;

int main(int argc, char* argv[])
{
	std::vector<std::string> state = 
	{
		"Problem 2",
		"",
		"Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:",
		"",
		"1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...",
		"",
		"By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.",

	};
	auto f = []() -> int
	{
		using namespace boost::adaptors;
		const auto upper = 4 * 1000 * 1000;

		return boost::accumulate(
			boost::iteration(
				std::make_pair(1, 1),
				boost::regular([](std::pair<int, int> x){
						return std::make_pair(x.second, x.first + x.second);
					})) 
			|+ transformed([](std::pair<int, int> x){ return x.second; })
			|+ filtered([](int x){ return x % 2 == 0; })
			|  taken_while([upper](int x){ return x < upper; })
			, 0);
	};

	solve(f, state);
	
	return 0;
}
