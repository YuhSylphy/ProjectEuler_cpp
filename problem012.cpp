#define BOOST_RESULT_OF_USE_DECLTYPE

#include "stdafx.h"

#include <iostream>
#include <vector>
#include <string>

#include "pe.h"

#include <boost/format.hpp>
#include <boost/range/numeric.hpp>
#include <boost/range/adaptor/transformed.hpp>
#include <boost/range/adaptor/regular_extension/transformed.hpp>
#include <boost/range/experimental/as_container.hpp>

#include <yuh/polygonal.hpp>
#include <yuh/prime.h>
#include <yuh/adaptor/prettied.hpp>
#include <yuh/adaptor/set_powered.hpp>
#include <yuh/adaptor/count_mapped.hpp>

using namespace euler;

int main(int argc, char* argv[])
{
	using namespace boost::adaptors;
	using namespace yuh::adaptors;

	std::vector<std::string> state = 
	{
		"Problem 12",
		"",
		"The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:",
		"",
		"1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...",
		"",
		"Let us list the factors of the first seven triangle numbers:",
		"",
		"1: 1",
		"3: 1,3",
		"6: 1,2,3,6",
		"10: 1,2,5,10",
		"15: 1,3,5,15",
		"21: 1,3,7,21",
		"28: 1,2,4,7,14,28",
		"We can see that 28 is the first triangle number to have over five divisors.",
		"",
		"What is the value of the first triangle number to have over five hundred divisors?",
	};
	auto f = []() -> int
	{
		static const auto tgt = 500; // 閾値
		for( auto tri: yuh::polygonal<3>() ) //多角数 p=3
		{
			if ( tgt < 
				 boost::accumulate( //約数の個数
					 yuh::prime_factor(tri) | count_mapped, // 素因数分解->値,個数ペア変換
					 1, //初期値
					 [](int p, std::pair<long long, int> x) {
						 return p * (std::get<1>(x) + 1); //個数+1を掛けていく
					 }) ) 
				return tri; //条件満たした三角数を発見
		}
		return 0;
	};
	
	solve(f, state);
	
	return 0;
}
